/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import { accessSync, constants, mkdirSync, rmSync, writeFile } from 'fs';
import { resolve } from 'path';
import { format } from 'util';
import type { NextFunction, Request, Response } from 'express';

export class LogError extends Error {
	constructor (message: string) {
		super(message);
		this.name = this.constructor.name;
	}
}

/**
 * Default name of logger file
 */
const defaultName = new Date().toISOString().normalize().replace(/[-:\\.]/g, '_');

/**
 * Write beautiful log file, by default file name is generated by server at starting and don't change; so you can init two instance of same class without problem
 */
export default class Log {
	private path: string;
	private num (n: number): string {
		return (n <= 9)
			? `0${n}`
			: String(n);
	}

	constructor (filename?: string) {
		const resolvePath = resolve('.', 'log');
		this.path = resolve('.', 'log', `${filename ?? defaultName}.log`);
		try {
			accessSync(resolvePath, constants.F_OK);
			if (process.env.NODE_ENV === 'development') {
				rmSync(resolvePath, { recursive: true });
				throw new LogError('rm failed');
			}
		} catch (___) {
			try {
				mkdirSync(resolvePath);
			} catch (e: any) {
				throw new LogError(e.message);
			}
		}
	}

	private write (type: string, data: string): void {
		const date = new Date();
		const printDate = `${date.getUTCFullYear()}-${this.num(date.getUTCMonth() + 1)}-${this.num(date.getUTCDate())} ${this.num(date.getUTCHours())}:${this.num(date.getUTCMinutes())}:${this.num(date.getUTCSeconds())}`;

		let ret = `[${type}] `;
		if (ret.length === 6)
			ret += ' ';
		ret += ` ${printDate} - `;
		ret += data;
		ret += '\n';

		writeFile(this.path, new Uint8Array(Buffer.from(ret)), {
			encoding: 'utf-8',
			flag: 'a'
		},
		(err) => {
			if (err)
				throw new LogError(`fs.writeFile failed - ${err.message}`);
		});
	}

	/**
	 * Get path of log file
	 */
	get filePath (): string {
		return this.path;
	}

	/**
	 * Log debug message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	debug (message: any, ...optional: any[]): void {
		this.write('debug', (optional.length)
			? format(message, ...optional)
			: message as string);
	}

	/**
	 * Log error message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	error (message: any, ...optional: any[]): void {
		this.write('error', (optional.length)
			? format(message, ...optional)
			: message as string);
	}

	/**
	 * Log info message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	info (message: any, ...optional: any[]): void {
		this.write('info', (optional.length)
			? format(message, ...optional)
			: message as string);
	}

	/**
	 * Log warning message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	warn (message: any, ...optional: any[]): void {
		this.write('warn', (optional.length)
			? format(message, ...optional)
			: message as string);
	}

	/**
	 * Log psql message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	psql (message: any, ...optional: any[]): void {
		this.write('psql', (optional.length)
			? format(message, ...optional)
			: message as string);
	}
}

/**
 * Default instance of logger
 */
export const log = new Log();

/**
 * Express middleware version for express js
 */
export const ExpressLog = (req: Request, res: Response, next: NextFunction): void => {
	const start = process.hrtime();
	const duration = () => {
		const df = process.hrtime(start);
		return ((df[0] * 1e9 + df[1]) / 1e6).toLocaleString() + 'ms';
	};
	const format = `${req.method}:${req.url} ${res.statusCode} | ${duration()}`;
	if (res.statusCode <= 299)
		log.info(format);
	else if (res.statusCode >= 300 && res.statusCode <= 399)
		log.debug(format);
	else if (res.statusCode >= 400 && res.statusCode <= 499)
		log.warn(format);
	else
		log.error(format);
	next();
};
