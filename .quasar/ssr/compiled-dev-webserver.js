"use strict";var P=Object.create;var m=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var H=(e,t)=>()=>(e&&(t=e(e=0)),t);var w=(e,t)=>{for(var r in t)m(e,r,{get:t[r],enumerable:!0})},v=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of T(t))!U.call(e,i)&&i!==r&&m(e,i,{get:()=>t[i],enumerable:!(s=k(t,i))||s.enumerable});return e};var M=(e,t,r)=>(r=e!=null?P(D(e)):{},v(t||!e||!e.__esModule?m(r,"default",{value:e,enumerable:!0}):r,e)),N=e=>v(m({},"__esModule",{value:!0}),e);var j={};w(j,{default:()=>Y});var C,R,Y,E=H(()=>{"use strict";C=require("http"),R=require("quasar/wrappers"),Y=(0,R.ssrMiddleware)(({app:e,resolve:t,render:r,serve:s})=>{e.get(t.urlPath("*"),(i,o)=>{o.setHeader("Content-Type","text/html"),r({req:i,res:o}).then(n=>o.send(n)).catch(n=>{n.url?n.code?o.redirect(n.code,n.url):o.redirect(n.url):n.code>=400&&n.code<=499?o.status(n.code).send(C.STATUS_CODES[n.code]):s.error({err:n,req:i,res:o})})})})});var B={};w(B,{close:()=>b,create:()=>y,injectMiddlewares:()=>h,listen:()=>$,serveStaticContent:()=>S});module.exports=N(B);var l=M(require("express")),Q=require("compression"),c=require("quasar/wrappers"),Z=require("helmet"),ee=require("hpp");var a=require("fs"),g=require("path"),p=require("util"),f=class extends Error{constructor(t){super(t),this.name=this.constructor.name}},O=new Date().toISOString().normalize().replace(/[-:\\.]/g,"_"),d=class{path;num(t){return t<=9?`0${t}`:String(t)}constructor(t){let r=(0,g.resolve)(".","log");this.path=(0,g.resolve)(".","log",`${t??O}.log`);try{throw(0,a.accessSync)(r,a.constants.F_OK),(0,a.rmSync)(r,{recursive:!0}),new f("rm failed")}catch{try{(0,a.mkdirSync)(r)}catch(i){throw new f(i.message)}}}write(t,r){let s=new Date,i=`${s.getUTCFullYear()}-${this.num(s.getUTCMonth()+1)}-${this.num(s.getUTCDate())} ${this.num(s.getUTCHours())}:${this.num(s.getUTCMinutes())}:${this.num(s.getUTCSeconds())}`,o=`[${t}] `;o.length===6&&(o+=" "),o+=` ${i} - `,o+=r,o+=`
`,(0,a.writeFile)(this.path,new Uint8Array(Buffer.from(o)),{encoding:"utf-8",flag:"a"},n=>{if(n)throw new f(`fs.writeFile failed - ${n.message}`)})}get filePath(){return this.path}debug(t,...r){this.write("debug",r.length?(0,p.format)(t,...r):t)}error(t,...r){this.write("error",r.length?(0,p.format)(t,...r):t)}info(t,...r){this.write("info",r.length?(0,p.format)(t,...r):t)}warn(t,...r){this.write("warn",r.length?(0,p.format)(t,...r):t)}psql(t,...r){this.write("psql",r.length?(0,p.format)(t,...r):t)}},u=new d,x=(e,t,r)=>{let s=process.hrtime(),i=()=>{let n=process.hrtime(s);return((n[0]*1e9+n[1])/1e6).toLocaleString()+"ms"},o=`${e.method}:${e.url} ${t.statusCode} | ${i()}`;t.statusCode<=299?u.info(o):t.statusCode>=300&&t.statusCode<=399?u.debug(o):t.statusCode>=400&&t.statusCode<=499?u.warn(o):u.error(o),r()};var y=(0,c.ssrCreate)(()=>{let e=(0,l.default)();return e.disable("x-powered-by"),e.use(l.default.urlencoded({extended:!0})),e.use(l.default.json()),e.use(x),e}),$=(0,c.ssrListen)(async({app:e,port:t,isReady:r})=>(await r(),e.listen(t,()=>{}))),b=(0,c.ssrClose)(({listenResult:e})=>e.close()),A=0,S=(0,c.ssrServeStaticContent)((e,t)=>l.default.static(e,{maxAge:A,...t})),F=/\.js$/,_=/\.css$/,q=/\.woff$/,X=/\.woff2$/,V=/\.gif$/,z=/\.jpe?g$/,L=/\.png$/,W=/\.webp$/,se=(0,c.ssrRenderPreloadTag)(e=>F.test(e)===!0?`<link rel="modulepreload" href="${e}" crossorigin>`:_.test(e)===!0?`<link rel="stylesheet" href="${e}">`:q.test(e)===!0?`<link rel="preload" href="${e}" as="font" type="font/woff" crossorigin>`:X.test(e)===!0?`<link rel="preload" href="${e}" as="font" type="font/woff2" crossorigin>`:V.test(e)===!0?`<link rel="preload" href="${e}" as="image" type="image/gif">`:z.test(e)===!0?`<link rel="preload" href="${e}" as="image" type="image/jpeg">`:L.test(e)===!0?`<link rel="preload" href="${e}" as="image" type="image/png">`:W.test(e)===!0?`<link rel="preload" href="${e}" as="image" type="image/webp">`:"");function h(e){return Promise.all([Promise.resolve().then(()=>(E(),j))]).then(async t=>{let r=t.map(s=>s.default);for(let s=0;s<r.length;s++)try{await r[s](e)}catch(i){console.error("[Quasar SSR] middleware error:",i);return}})}0&&(module.exports={close,create,injectMiddlewares,listen,serveStaticContent});
//# sourceMappingURL=data:application/json;base64,
